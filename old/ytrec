#!/bin/bash

set -euo pipefail
source /home/east/bin/scripts.sh

print_help() {
  echo "Usage: ytrec x y"
  wprint "where x and y are coordinates in the recommendations that youtube shows at the end of a youtube video. If youtube gave you the standard 4x3 grid, here are the coordinates for each of the videos:"
  echo "+-----+-----+-----+-----+"
  echo "| 1 1 | 2 1 | 3 1 | 4 1 |"
  echo "+-----+-----+-----+-----+"
  echo "| 1 2 | 2 2 | 3 2 | 4 2 |"
  echo "+-----+-----+-----+-----+"
  echo "| 1 3 | 2 3 | 3 3 | 4 3 |"
  echo "+-----+-----+-----+-----+"
  wprint "So, if you wanted the third video from the middle row, for example, you would type this command:"
  echo "    ytrec 3 2"
  if [ -z "$verbose" ]; then
    return
  fi
  echo ""
  wprint "With most videos, the recommendations will be the same in fullscreen or windowed mode. However, with videos in a different aspect ratio, the recommendations may be arranged differently when viewed in windowed mode. If the video recommendations are in some other set of dimensions, then making the video full-screen will change it to be 4x3. In some common cases, here are the coordinates for each of the videos:"
  echo "+-----+-----+-----+   +-----+-----+"
  echo "| 1 1 | 2 2 | 3 3 |   | 1 1 | 2 3 |"
  echo "+-----+-----+-----+   +-----+-----+"
  echo "| 1 2 | 2 3 | 4 1 |   | 1 2 | 3 1 |"
  echo "+-----+-----+-----+   +-----+-----+"
  echo "| 1 3 | 3 1 | 4 2 |   | 1 3 | 3 2 |"
  echo "+-----+-----+-----+   +-----+-----+"
  echo "| 2 1 | 3 2 | 4 3 |   | 2 1 | 3 3 |"
  echo "+-----+-----+-----+   +-----+-----+"
  echo "                      | 2 2 | 4 1 |"
  echo "                      +-----+-----+"
}

x_error() {
  if [ -z "$x" ]; then
    echo "Error: No arguments provided"
  else
    echo "Error: Invalid value for x: '$x'"
  fi
  echo
  print_help
  exit 1
}
y_error() {
  if [ -z "$y" ]; then
    echo "Error: No argument provided for y"
  else
    echo "Error: Invalid value for y: '$y'"
  fi
  echo
  print_help
  exit 1
}

x=''
y=''
hflag=''
verbose=''

while [ -n "${1+x}" ]; do
  case "$1" in
    -h|--help)
      hflag=1
      shift 1
      ;;
    -hv)
      hflag=1
      verbose=1
      shift 1
      ;;
    -v|--verbose)
      verbose=1
      shift 1
      ;;
    *)
      if [ -z "$x" ]; then
        x="$1"
      else
        if [ -z "$y" ]; then
          y="$1"
        else
          hprint "Too many arguments"
          print_help
          exit 1
        fi
      fi
      shift 1
      ;;
  esac
done

if [ -n "$hflag" ]; then
  print_help
  exit
fi

[ "$x" -eq "$x" ] 2>/dev/null || x_error
[ "$y" -eq "$y" ] 2>/dev/null || y_error

margin=300  
vscale=225
hscale=383
x=$((margin+ (x - 1) * hscale))
y=$((margin+ (y - 1) * vscale))
mm "$x" "$y";
make_yt_fullscreen
c
